/*
** Â© Bart Kampers
*/
package bka.demo.calendar;

import bka.awt.clock.*;
import java.awt.*;
import java.time.*;
import java.util.*;
import java.util.function.*;
import javax.swing.*;


public class CalendarPanel extends javax.swing.JPanel {

    public static final Color FONT_COLOR = new Color(0, 0, 135);

    public CalendarPanel(CalendarPanelConfiguration configuration, CalendarModel model) {
        this.model = Objects.requireNonNull(model);
        initComponents();
        final int radius = Math.min(clockPanel.getWidth(), clockPanel.getHeight()) / 2;
        final Point center = new Point(clockPanel.getWidth() / 2, clockPanel.getHeight() / 2);
        final int fontSize = 12;
        clock = new ClockRenderer(center, configuration.getHourScale());
        clock.add(clockFaceRenderer(center, radius));
        MarkerRingRenderer markers = clock.addMarkerRingRenderer(radius - (fontSize * 2), 1, markerRingRenderer(fontSize));
        Scale fractionScale = configuration.getFractionScale();
        markers.setScale(fractionScale);
        numberRenderer = new FormattedValueRenderer(FONT_COLOR, getFont(Font.BOLD, fontSize));
        clock.addNonTiltedMarkerRingRenderer(radius * 9 / 10, configuration.getHourInterval(), numberRenderer);
        decorator = configuration.getDecorator();
        decorator.ifPresent(initializeDecorator(radius - 35));
        hourHand = clock.addNeedleRenderer(needleRenderer(() -> hourHandPaint, 5, radius / 2));
        minuteHand = clock.addNeedleRenderer(needleRenderer(() -> minuteHandPaint, 3, radius - (fontSize + 10)));
        minuteHand.setScale(fractionScale);
        secondHand = clock.addNeedleRenderer(needleRenderer(() -> secondHandPaint, 1, radius - (fontSize + 5)));
        secondHand.setScale(fractionScale);
    }

    private bka.awt.Renderer clockFaceRenderer(Point center, int radius) {
        int x = center.x - radius;
        int y = center.y - radius;
        int diameter = radius * 2;
        return graphics -> {
            graphics.setPaint(clockFacePaint);
            graphics.fillOval(x, y, diameter, diameter);
        };
    }

    private MarkerRenderer markerRingRenderer(int fontSize) {
        Stroke stroke = new BasicStroke(3f);
        return (graphics, value) -> {
            graphics.setPaint(markerPaint);
            graphics.setStroke(stroke);
            graphics.drawLine(0, 0, 0, (((int) value) % 5 == 0) ? fontSize / 2 : fontSize / 4);
        };
    }

    private Consumer<SolarDecorator> initializeDecorator(double radius) {
        return solarDecorator -> {
            solarDecorator.calculateArcs(LocalDate.now()).forEach((event, arc) -> {
                ArcRenderer arcRenderer = new ArcRenderer(radius, arc);
                solarArcs.put(event, arcRenderer);
                clock.add(arcRenderer);
            });
        };
    }

    private bka.awt.Renderer needleRenderer(Supplier<Paint> paint, float width, int length) {
        Stroke stroke = new BasicStroke(width, BasicStroke.CAP_ROUND, BasicStroke.JOIN_MITER);
        return graphics -> {
            graphics.setPaint(paint.get());
            graphics.setStroke(stroke);
            graphics.drawLine(0, 5, 0, -length);
        };
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        yearPanel = new javax.swing.JPanel();
        yearLabel = new javax.swing.JLabel();
        weekLabel = new javax.swing.JLabel();
        clockPanel = new ClockPanel();
        datePanel = new javax.swing.JPanel();
        dayLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        monthLabel = new javax.swing.JLabel();
        dayOfYearLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        yearLabel.setFont(new java.awt.Font("Times New Roman", 0, 32)); // NOI18N
        yearLabel.setForeground(FONT_COLOR);
        yearLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        yearLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        yearLabel.setSize(new java.awt.Dimension(120, 58));

        weekLabel.setFont(getFont(14));
        weekLabel.setForeground(FONT_COLOR);
        weekLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        weekLabel.setMaximumSize(new java.awt.Dimension(93, 22));
        weekLabel.setMinimumSize(new java.awt.Dimension(93, 22));
        weekLabel.setPreferredSize(new java.awt.Dimension(93, 22));
        weekLabel.setSize(new java.awt.Dimension(93, 22));

        clockPanel.setSize(new java.awt.Dimension(412, 193));

        javax.swing.GroupLayout clockPanelLayout = new javax.swing.GroupLayout(clockPanel);
        clockPanel.setLayout(clockPanelLayout);
        clockPanelLayout.setHorizontalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 412, Short.MAX_VALUE)
        );
        clockPanelLayout.setVerticalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 193, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout yearPanelLayout = new javax.swing.GroupLayout(yearPanel);
        yearPanel.setLayout(yearPanelLayout);
        yearPanelLayout.setHorizontalGroup(
            yearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, yearPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(clockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(yearPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(yearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(weekLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        yearPanelLayout.setVerticalGroup(
            yearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(yearPanelLayout.createSequentialGroup()
                .addGroup(yearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(yearPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(yearLabel))
                    .addGroup(yearPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(weekLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(yearPanel, java.awt.BorderLayout.NORTH);

        datePanel.setPreferredSize(new java.awt.Dimension(406, 120));

        dayLabel.setFont(getFont(24));
        dayLabel.setForeground(FONT_COLOR);
        dayLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dayLabel.setMaximumSize(new java.awt.Dimension(96, 22));
        dayLabel.setMinimumSize(new java.awt.Dimension(96, 22));

        dateLabel.setFont(getFont(38));
        dateLabel.setForeground(FONT_COLOR);
        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateLabel.setMaximumSize(new java.awt.Dimension(30, 30));
        dateLabel.setMinimumSize(new java.awt.Dimension(30, 30));
        dateLabel.setPreferredSize(new java.awt.Dimension(30, 30));

        monthLabel.setFont(getFont(24));
        monthLabel.setForeground(FONT_COLOR);
        monthLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        monthLabel.setMaximumSize(new java.awt.Dimension(93, 22));
        monthLabel.setMinimumSize(new java.awt.Dimension(93, 22));
        monthLabel.setPreferredSize(new java.awt.Dimension(93, 22));

        dayOfYearLabel.setFont(getFont(24));
        dayOfYearLabel.setForeground(FONT_COLOR);
        dayOfYearLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout datePanelLayout = new javax.swing.GroupLayout(datePanel);
        datePanel.setLayout(datePanelLayout);
        datePanelLayout.setHorizontalGroup(
            datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(datePanelLayout.createSequentialGroup()
                        .addComponent(dayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(monthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dayOfYearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        datePanelLayout.setVerticalGroup(
            datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePanelLayout.createSequentialGroup()
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datePanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(monthLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dayLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, datePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(dayOfYearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        add(datePanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    public void update() {
        yearLabel.setText(model.getYear());
        weekLabel.setText(model.getWeek());
        setFontColor(dayLabel, model.getDayOfWeekColor());
        dayLabel.setText(model.getDayOfWeek());
        dateLabel.setText(model.getDate());
        monthLabel.setText(model.getMonth());
        setFontColor(dayOfYearLabel, model.getDayOfYearColor());
        dayOfYearLabel.setText(model.getDayOfYear().orElse(""));
        hourHand.setValue(model.getHour());
        minuteHand.setValue(model.getMinute());
        secondHand.setValue(model.getSecond());
        decorator.ifPresent(this::updateSolarDecoration);
        repaint();
        datePanel.setToolTipText(model.getDateToolTipText());
    }


    private void updateSolarDecoration(SolarDecorator solarDecorator) {
        Map<SolarDecorator.Event, SolarDecorator.Arc> arcs = solarDecorator.calculateArcs(LocalDate.now());
        SolarDecorator.Event currentEvent = arcs.keySet().stream()
            .filter(e -> model.getHour() < arcs.get(e).getEnd())
            .findFirst().orElse(arcs.keySet().iterator().next());
        Color faceColor = arcs.get(currentEvent).getColor();
        if (!clockFacePaint.equals(faceColor)) {
            updateColors(currentEvent, faceColor);
            arcs.forEach((event, arc) -> {
                solarArcs.get(event).arc.setStart(arc.getStart());
                solarArcs.get(event).arc.setEnd(arc.getEnd());
            });
        }
    }

    private void updateColors(SolarDecorator.Event currentEvent, Color faceColor) {
        clockFacePaint = faceColor;
        hourHandPaint = (currentEvent == SolarDecorator.Event.ASTRONOMICAL_SUNRISE) ? BRIGHT_COLOR : Color.BLACK;
        minuteHandPaint = (currentEvent == SolarDecorator.Event.ASTRONOMICAL_SUNRISE) ? BRIGHT_COLOR : Color.BLACK;
        secondHandPaint = (currentEvent == SolarDecorator.Event.ASTRONOMICAL_SUNRISE) ? Color.YELLOW : Color.RED;
        numberRenderer.setPaint((currentEvent == SolarDecorator.Event.ASTRONOMICAL_SUNRISE) ? Color.YELLOW : Color.BLUE);
        markerPaint = (currentEvent == SolarDecorator.Event.ASTRONOMICAL_SUNRISE) ? BRIGHT_COLOR : Color.BLUE;
    }

    private void setFontColor(JLabel component, Optional<Color> color) {
        component.setForeground(color.orElse(FONT_COLOR));
    }

    private static Font getFont(int size) {
        return getFont(Font.PLAIN, size);
    }

    private static Font getFont(int style, int size) {
        return new Font("Helvetica", style, size);
    }

    public CalendarModel getModel() {
        return model;
    }


    private class ArcRenderer implements bka.awt.Renderer {

        public ArcRenderer(double radius, SolarDecorator.Arc arc) {
            this.radius = radius;
            this.arc = arc;
        }

        @Override
        public void paint(Graphics2D graphics) {
            graphics.setPaint(arc.getColor());
            graphics.setStroke(arc.getStroke());
            graphics.draw(clock.createArc(radius, arc.getStart(), arc.getEnd()));
        }

        private final double radius;
        private final SolarDecorator.Arc arc;
    }


    private class ClockPanel extends javax.swing.JPanel {
        @Override
        public void paint(Graphics graphics) {
            super.paint(graphics);
            clock.paint((Graphics2D) graphics);
        }
    }


    private final CalendarModel model;
    private final Optional<SolarDecorator> decorator;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel clockPanel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JPanel datePanel;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JLabel dayOfYearLabel;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JLabel weekLabel;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JPanel yearPanel;
    // End of variables declaration//GEN-END:variables


    private final ClockRenderer clock;
    private final NeedleRenderer hourHand;
    private final NeedleRenderer minuteHand;
    private final NeedleRenderer secondHand;
    private final Map<SolarDecorator.Event, ArcRenderer> solarArcs = new HashMap<>();

    private final FormattedValueRenderer numberRenderer;

    private Paint clockFacePaint = Color.WHITE;
    private Paint hourHandPaint = Color.BLACK;
    private Paint minuteHandPaint = Color.BLACK;
    private Paint secondHandPaint = Color.RED;
    private Paint markerPaint = Color.BLUE;

    private static final Color BRIGHT_COLOR = Color.YELLOW.darker();

}
