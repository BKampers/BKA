/*
** Â© Bart Kampers
*/
package bka.demo.calendar;

import bka.calendar.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.util.List;
import java.util.*;
import java.util.stream.*;

public class CalendarDemo extends javax.swing.JFrame {

    /**
     * Creates new form CalendarFrame
     */
    public CalendarDemo() {
        initComponents();
        calendarsPanel.add(gregorianPanel);
        calendarsPanel.add(republicanPanel);
        calendarsPanel.add(earthianPanel);
        hoveredPanel = gregorianPanel;
        MouseListener mouseListener = getMouseListener();
        gregorianPanel.addMouseListener(mouseListener);
        republicanPanel.addMouseListener(mouseListener);
        earthianPanel.addMouseListener(mouseListener);
        Timer timer = new Timer();
        timer.schedule(timerTask, nextSecond(), MILLIS_PER_SECOND);
    }

    private MouseListener getMouseListener() {
        return new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                hoveredPanel = (CalendarPanel) evt.getSource();
            }
        };
    }

    private static long nextSecond() {
        return MILLIS_PER_SECOND - System.currentTimeMillis() % MILLIS_PER_SECOND;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendarsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 25, 1300, 300));
        setMinimumSize(new java.awt.Dimension(1300, 300));
        setName("Calendars"); // NOI18N

        calendarsPanel.setPreferredSize(new java.awt.Dimension(1000, 400));
        calendarsPanel.setSize(new java.awt.Dimension(1000, 400));
        getContentPane().add(calendarsPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalendarDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalendarDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalendarDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalendarDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new CalendarDemo().setVisible(true));
    }

    private final TimerTask timerTask = new TimerTask() {
        @Override
        public void run() {
            long millis = System.currentTimeMillis();
            gregorian.setTimeInMillis(millis);
            gregorianPanel.update();
            republican.setTimeInMillis(millis);
            republicanPanel.update();
            earthian.setTimeInMillis(millis);
            earthianPanel.update();
            setIcon(hoveredPanel.getModel());
        }
    };

    private void setIcon(CalendarModel model) {
        if (Objects.equals(iconDate, model.getDate()) && Objects.equals(iconMonth, model.getMonth())) {
            return;
        }
        String osName = System.getProperty("os.name");
        if (osName.contains("Mac")) {
            setMacIcon(model);
        }
        else if (osName.contains("Windows")) {
            setWindowsIcons(model);
        }
        else {
            setIconImage(createDefaultImage(model, DEFAULT_ICON_SIZE));
        }
        iconDate = model.getDate();
        iconMonth = model.getMonth();
    }

    private static void setMacIcon(CalendarModel model) {
        Taskbar.getTaskbar().setIconImage(createDefaultImage(model, DEFAULT_ICON_SIZE));
    }

    private void setWindowsIcons(CalendarModel model) {
        setIconImages(java.util.List.of(
            createWindowsImage(model, THUMB_ICON_SIZE),
            createWindowsImage(model, SMALL_ICON_SIZE)));
    }

    private static BufferedImage createDefaultImage(CalendarModel model, int size) {
        BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
        Graphics2D graphics = (Graphics2D) image.getGraphics();
        drawImageBackground(graphics, size);
        drawDayOfMonth(graphics, model, size);
        String month = model.getMonth();
        if (!month.isBlank()) {
            drawMonthText(graphics, month, size);
        }
        else {
            drawDayOfYearText(graphics, model, size);
        }
        return image;
    }

    private static void drawDayOfMonth(Graphics2D graphics, CalendarModel model, int size) {
        graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        graphics.setFont(new Font(Font.SANS_SERIF, Font.BOLD, size / 3));
        FontMetrics metrics = graphics.getFontMetrics();
        graphics.setColor(model.getDayOfWeekColor().orElse(CalendarPanel.FONT_COLOR));
        String date = model.getDate();
        graphics.drawString(date, (size - metrics.stringWidth(date)) / 2, size / 2);
    }

    private static void drawMonthText(Graphics2D graphics, String text, int size) {
        graphics.setColor(CalendarPanel.FONT_COLOR);
        graphics.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, size / 8));
        FontMetrics metrics = graphics.getFontMetrics();
        graphics.drawString(text, (size - metrics.stringWidth(text)) / 2, size - size / 4);
    }

    private static void drawDayOfYearText(Graphics2D graphics, CalendarModel model, int size) {
        Optional<String> dayOfYear = model.getDayOfYear();
        if (dayOfYear.isEmpty()) {
            return;
        }
        List<String> lines = getLines(dayOfYear.get());
        graphics.setColor(model.getDayOfYearColor().orElse(CalendarPanel.FONT_COLOR));
        graphics.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, size / 10));
        FontMetrics metrics = graphics.getFontMetrics();
        int y = size - size / 4;
        for (String line : lines) {
            graphics.drawString(line, (size - metrics.stringWidth(line)) / 2, y);
            y += metrics.getHeight();
        }
    }

    private static List<String> getLines(String dayOfYear) {
        ArrayList<String> lines = new ArrayList<>();
        String[] text = dayOfYear.split("\\s");
        if (text.length > 1) {
            return List.of(concatWithoutLast(text), text[text.length - 1]);
        }
        return List.of(dayOfYear);
    }

    private static String concatWithoutLast(String[] text) {
        return Arrays.stream(text).limit(text.length - 1).collect(Collectors.joining(" "));
    }

    private static BufferedImage createWindowsImage(CalendarModel model, int size) {
        BufferedImage image = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
        Graphics2D graphics = (Graphics2D) image.getGraphics();
        drawImageBackground(graphics, size);
        graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        graphics.setFont(new Font(Font.SANS_SERIF, Font.BOLD, size / 2));
        FontMetrics metrics = graphics.getFontMetrics();
        graphics.setColor(CalendarPanel.FONT_COLOR);
        String date = model.getMonth();
        graphics.drawString(date, (size - metrics.stringWidth(date)) / 2, size / 16 * 10);
        return image;
    }

    private static void drawImageBackground(Graphics2D graphics, int size) {
        int margin = size / 16;
        int innerSize = size - 2 * margin;
        graphics.setColor(Color.WHITE);
        graphics.fillRect(margin, margin, innerSize, innerSize);
        graphics.setColor(Color.GRAY);
        graphics.drawRect(margin, margin, innerSize, innerSize);
    }

    private CalendarPanel hoveredPanel;
    private String iconDate;
    private String iconMonth;

    private final Calendar gregorian = Calendar.getInstance();
    private final Calendar republican = FrenchRepublicanCalendar.getInstance();
    private final Calendar earthian = EarthianCalendar.getInstance();
    private final CalendarPanel gregorianPanel = new CalendarPanel(new CalendarPanelConfiguration(), new CalendarModel(gregorian));
    private final CalendarPanel republicanPanel = new CalendarPanel(new FrenchRepublicanCalendarPanelConfiguration(), new FrenchRepublicanCalendarModel(republican));
    private final CalendarPanel earthianPanel = new CalendarPanel(new EarthianCalendarPanelConfiguration(), new EarthianCalendarModel(earthian));

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel calendarsPanel;
    // End of variables declaration//GEN-END:variables

    private static final long MILLIS_PER_SECOND = 1000;

    private static final int DEFAULT_ICON_SIZE = 1024;
    private static final int SMALL_ICON_SIZE = 256;
    private static final int THUMB_ICON_SIZE = 32;


}
